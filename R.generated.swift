//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `ic_chargeback_lock`.
    static let ic_chargeback_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chargeback_lock")
    /// Image `ic_chargeback_unlock`.
    static let ic_chargeback_unlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chargeback_unlock")
    
    /// `UIImage(named: "ic_chargeback_lock", bundle: ..., traitCollection: ...)`
    static func ic_chargeback_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chargeback_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chargeback_unlock", bundle: ..., traitCollection: ...)`
    static func ic_chargeback_unlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chargeback_unlock, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ModalAlertViewController`.
    static let modalAlertViewController = _R.nib._ModalAlertViewController()
    
    /// `UINib(name: "ModalAlertViewController", in: bundle)`
    static func modalAlertViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.modalAlertViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `NoticeViewController`, and contains static references to 1 segues.
    struct noticeViewController {
      /// Segue identifier `chargebackView`.
      static let chargebackView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NoticeViewController, ChargebackViewController> = Rswift.StoryboardSegueIdentifier(identifier: "chargebackView")
      
      /// Optionally returns a typed version of segue `chargebackView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chargebackView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NoticeViewController, ChargebackViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.noticeViewController.chargebackView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.api` struct is generated, and contains static references to 1 localization keys.
    struct api {
      /// Value: Erro inesperado. Tente novamente.
      static let genericErrorMessage = Rswift.StringResource(key: "genericErrorMessage", tableName: "Api", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Erro inesperado. Tente novamente.
      static func genericErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("genericErrorMessage", tableName: "Api", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.chargeback` struct is generated, and contains static references to 2 localization keys.
    struct chargeback {
      /// Value: Bloqueamos preventivamente o seu cartão
      static let cardBlockedMessage = Rswift.StringResource(key: "cardBlockedMessage", tableName: "Chargeback", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cartão desbloqueado, recomendamos mantê-lo bloqueado.
      static let cardUnblockedMessage = Rswift.StringResource(key: "cardUnblockedMessage", tableName: "Chargeback", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Bloqueamos preventivamente o seu cartão
      static func cardBlockedMessage(_: Void = ()) -> String {
        return NSLocalizedString("cardBlockedMessage", tableName: "Chargeback", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cartão desbloqueado, recomendamos mantê-lo bloqueado.
      static func cardUnblockedMessage(_: Void = ()) -> String {
        return NSLocalizedString("cardUnblockedMessage", tableName: "Chargeback", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.modalAlert` struct is generated, and contains static references to 2 localization keys.
    struct modalAlert {
      /// Value: Contestação de compra recebida
      static let title = Rswift.StringResource(key: "title", tableName: "ModalAlert", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fique de olho no seu email! Nos próximos 3 dias você deverá receber um primeiro retorno sobre sua contestação.
      static let descriptionText = Rswift.StringResource(key: "descriptionText", tableName: "ModalAlert", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Contestação de compra recebida
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", tableName: "ModalAlert", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Fique de olho no seu email! Nos próximos 3 dias você deverá receber um primeiro retorno sobre sua contestação.
      static func descriptionText(_: Void = ()) -> String {
        return NSLocalizedString("descriptionText", tableName: "ModalAlert", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.notice` struct is generated, and contains static references to 0 localization keys.
    struct notice {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ModalAlertViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ModalAlertViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_chargeback_unlock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chargeback_unlock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chargeback_lock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chargeback_lock' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
